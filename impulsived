#!/usr/bin/env python3

import serial
import configparser
import signal
import sys
from influxdb import InfluxDBClient

config = configparser.ConfigParser()
config.read('config.conf')

influx_host = config.get("DEFAULT", "influx_host")
influx_port = config.get("DEFAULT", "influx_port")
influx_user = config.get("DEFAULT", "influx_user")
influx_pass = config.get("DEFAULT", "influx_pass")
influx_db = config.get("DEFAULT", "influx_db")

port = config.get("DEFAULT", "arduino_port")
baud = config.get("DEFAULT", "arduino_baud")

trigger1amount = config.get("DEFAULT", "trigger1amount")
trigger1unit = config.get("DEFAULT", "trigger1unit")
trigger1name = config.get("DEFAULT", "trigger1name")
trigger2amount = config.get("DEFAULT", "trigger2amount")
trigger2unit = config.get("DEFAULT", "trigger2unit")
trigger2name = config.get("DEFAULT", "trigger2name")

client = InfluxDBClient(influx_host,
                        influx_port,
                        influx_user,
                        influx_pass,
                        influx_db)

ser = serial.Serial(port, baud)

def quit_signal(signal, frame):
  print('Shutting down.')
  sys.exit(0)
signal.signal(signal.SIGINT, quit_signal)

def logToInflux(measurement, value):
  json_body = [
    {
      "measurement": measurement,
      "fields": {
        "value": value,
      }
    }
  ]
  client.write_points(json_body)

while True:
  line = ser.readline().decode('ascii')
  if line == "PIN1 triggered!\r\n":
    print("{}{} of {} consumed.".format(trigger1amount,
                                        trigger1unit,
                                        trigger1name))
    logToInflux(trigger1name, float(trigger1amount))
  elif line == "PIN2 triggered!\r\n":
    print("{}{} of {} consumed.".format(trigger2amount,
                                        trigger2unit,
                                        trigger2name))
    logToInflux(trigger2name, float(trigger2amount))
